@model LightStreamWeb.Models.PreFunding.FundingFailedPageModel

@section styles {
    <style type="text/css">
        .row.ruled {
            border-bottom:none;
        }
    </style>
}

<section class="row">
<div class="large-12 columns">
<form method="post" action="/appstatus/prefunding/fundingfailed" 
    novalidate 
    name="FundingFailedForm"
    ls-validate-on-submit="ls-validate-on-submit" 
    on-success="onNextStep()"
    ng-controller="FundingFailedController">
    <fieldset ng-disabled="OnFormSuccess">
        @if (TempData["ErrorMessage"] != null) {
        <div class="row">
            <div class="medium-12 columns">
                <div class="formalert">
                    <p>@TempData["ErrorMessage"]</p>                    
                </div>
            </div>
        </div>
        }

        <script type="text/ng-template" id="StepFundingDate">
            <div class="row">
	            <div class="large-12 columns">
                    <h2 class="brand">Select Funding Date</h2>
                </div>
            </div>

            <div class="row">
	            <div class="large-12 columns">
                    <p>To set up your loan again for funding, please choose a funding date by selecting an eligible date from the calendar. Thank you. </p>
                </div>
            </div>
            
            @Html.Partial("~/Views/ApplicationStatus/PreFunding/_Calendar.cshtml", model: Model, viewData: new ViewDataDictionary { { "ngModelName", "Model" } })

        </script>

        <script type="text/ng-template" id="StepDeposit">
            <div class="row">
	            <div class="large-12 columns">
                    <h2 class="brand">Account Information</h2>
                </div>
            </div>

            <div class="row">
                <div class="medium-12 columns">
                    <p>Enter new account information for deposit of loan proceeds. If you need help locating the routing number or account number on your check, please see example. </p>
                </div>
            </div>

            @Html.Partial("~/Views/ApplicationStatus/_FundingAccount.cshtml", Model, new ViewDataDictionary{ { "ngModelName", "Model" }})

            @if (Model.IsAutoPay() && Model.IsPaymentAccountSameAsFundingAccount())
            {
                <div class="row">
                    <div class="medium-12 columns">
                        <p>Do you want your monthly loan payments to be debited from the above account?</p>
                        <div>
                            <input type="radio" name="PaymentAccountSameAsFunding" id="PaymentAccountSameAsFundingYes" ng-required="true" ng-model="Model.PaymentAccountSameAsFunding" 
                                ng-value="true"><label for="PaymentAccountSameAsFundingYes">Yes</label>
                            <input type="radio" name="PaymentAccountSameAsFunding" id="PaymentAccountSameAsFundingNo" ng-required="true" ng-model="Model.PaymentAccountSameAsFunding" 
                                ng-value="false"><label for="PaymentAccountSameAsFundingNo">No</label>
                        </div>

                    </div>
                </div>

                <div ng-if="!Model.PaymentAccountSameAsFunding">
                <div class="row">
                    <div class="medium-12 columns">
                        <p>Enter new account information for monthly AutoPay payments</p>
                    </div>
                </div>

                @Html.Partial("~/Views/ApplicationStatus/PreFunding/_PaymentAccount.cshtml")

                </div>
            }
        </script>



        <ng-view autoscroll="true"></ng-view>

        <div class="row"><div class="medium-12 columns"><br /></div></div>

        <div class="row" ng-cloak ng-show="ErrorMessage">
            <div class="medium-12 columns">
                <div class="formalert">
                    <p ng-bind-html="ErrorMessage"></p>                    
                </div>
            </div>
        </div>

        <div class="row" ng-cloak ng-show="AccountInfoHasNotChanged">
            <div class="medium-12 columns">
                <div class="formalert">
                    <p>The account information that you entered is the same one that recently failed.  Please enter a different account number or routing number.  If you have any concerns regarding which numbers to use, contact your financial institution.  Thank you.</p>                    
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="medium-12 columns">
                <input type="submit" class="button button-medium " value="Next" ng-disabled="AccountInfoHasNotChanged"/>
                <img src="@Model.CdnBaseUrl/ajax-loader.gif" ng-cloak ng-show="Waiting" />
            </div>
        </div>
    </fieldset>
</form>
</div>

</section>


<section class="row ruled">

</section>

@section scripts {
<script type="text/javascript">
    angular.module('ApplicationStatusModule')
        .config(['$routeProvider', function ($routeProvider) {
            $routeProvider
                .when('/StepDeposit', { templateUrl: 'StepDeposit' })
                .otherwise({ templateUrl: 'StepFundingDate' });
        }]);


    angular.module('ApplicationStatusModule')
        .controller('FundingFailedController', function ($scope, $http, $location, $window, $timeout, $sce) {
            $scope.Model = {
                PaymentAccountSameAsFunding: @Model.IsPaymentAccountSameAsFundingAccount().ToString().ToLower(),
                FundingAccount: {
                    AuthorizedSigner: '@Model.GetAuthorizedSigner()'
                },
                PaymentAccount: {
                    AuthorizedSigner: '@Model.GetAuthorizedSigner()'
                },
                BrokerageAccount: {
                    AuthorizedSigner: '@Model.GetAuthorizedSigner()'
                },
                IsWire: @Model.IsFundingToday.ToString().ToLower(),
                IsPreviousFundingWire: @Model.IsPreviousFundingWire().ToString().ToLower()
            };

            $scope.CurrentRoutingNumber = '@Model.FundingRoutingNumber';
            $scope.CurrentAccountNumber = '@Model.FundingAccountNumber';
            $scope.CurrentFundingDate = '@(Model.FundingDate.ToString("yyyy-M-d"))';
            $scope.CalendarFundingDates = @Html.Raw(Model.GetCalendarFundingDatesJson());
            $scope.CurrentFundingAccountIsBrokerageAccount = @Model.IsFundingAccountBrokerageAccount().ToString().ToLower();
            var initCalendar = function () {
                // show two months
                $scope.dateOptions = {
                    numberOfMonths: 2,
                    setDate: 0,
                    beforeShowDay: function (date) {
                        if (!$scope.CalendarFundingDates) {
                            return [true];
                        }
                        var dateKey = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
                        if (dateKey === $scope.CurrentFundingDate) {
                            return [true, 'current', ''];
                        }
                        var fd = $scope.CalendarFundingDates[dateKey];
                        if (fd && fd === 'Wire') {
                            return [true, 'wire', ''];
                        }
                        if (fd && fd === 'ACH') {
                            return [true, 'ach', ''];
                        }
                        return [false, '', ''];
                    }
                };
            };
            $scope.$watch('Model.FundingAccount.RoutingNumber', function (newValue, oldValue) {
                if (newValue && newValue !== oldValue) {
                    $http
                        .post('/services/BankingInformation', {
                            routingNumber: $scope.Model.FundingAccount.RoutingNumber
                        })
                        .success(function (data, status, headers, config) {
                            if (data && data.BankName && $scope.Model.BrokerageAccount) {
                                $scope.Model.BrokerageAccount.BeneficiaryBankName = data.BankName.substring(0, 17);
                            }
                        });
                }
            });
            // requirements madness - to display fields twice. And mirror them. Really.
            $scope.$watch('Model.BrokerageAccount.BeneficiaryRoutingNumber', function (newValue, oldValue) {
                if (newValue !== oldValue && $scope.Model.BrokerageAccount && $scope.Model.FundingAccount) {
                    $scope.Model.FundingAccount.RoutingNumber = newValue;
                }
            });
            $scope.$watch('Model.BrokerageAccount.BeneficiaryAccountNumber', function (newValue, oldValue) {
                if (newValue !== oldValue && $scope.Model.BrokerageAccount && $scope.Model.FundingAccount) {
                    $scope.Model.FundingAccount.AccountNumber = newValue;
                }
            });
            $scope.$watch('Model.BrokerageAccount.BeneficiaryConfirmAccountNumber', function (newValue, oldValue) {
                if (newValue !== oldValue && $scope.Model.BrokerageAccount && $scope.Model.FundingAccount) {
                    $scope.Model.FundingAccount.ConfirmAccountNumber = newValue;
                }
            });
            $scope.$watch('Model.FundingAccount.RoutingNumber', function (newValue, oldValue) {
                if (newValue !== oldValue && $scope.Model.BrokerageAccount && $scope.Model.FundingAccount) {
                    $scope.Model.BrokerageAccount.BeneficiaryRoutingNumber = newValue;
                }
            });
            $scope.$watch('Model.FundingAccount.AccountNumber', function (newValue, oldValue) {
                if (newValue !== oldValue && $scope.Model.BrokerageAccount && $scope.Model.FundingAccount) {
                    $scope.Model.BrokerageAccount.BeneficiaryAccountNumber = newValue;
                }
            });
            $scope.$watch('Model.FundingAccount.ConfirmAccountNumber', function (newValue, oldValue) {
                if (newValue !== oldValue && $scope.Model.BrokerageAccount && $scope.Model.FundingAccount) {
                    $scope.Model.BrokerageAccount.BeneficiaryConfirmAccountNumber = newValue;
                }
            });

            $scope.$watch('Model.FundingDate', function () {
                if (!$scope.CalendarFundingDates) {
                    return;
                }
                var date = new Date($scope.Model.FundingDate),
                    fd = $scope.CalendarFundingDates[date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()];

                $scope.Model.IsWire = (fd === 'Wire');
            });
            $scope.$watchCollection('[Model.FundingAccount.RoutingNumber,Model.FundingAccount.AccountNumber,Model.FundingAccountIsBrokerageAccount]', function () {
                $scope.AccountInfoHasNotChanged = 
                    ($scope.Model.FundingAccount.RoutingNumber === $scope.CurrentRoutingNumber && 
                     $scope.Model.FundingAccount.AccountNumber === $scope.CurrentAccountNumber &&
                     $scope.Model.FundingAccountIsBrokerageAccount === $scope.CurrentFundingAccountIsBrokerageAccount &&
                     $scope.Model.IsWire === $scope.Model.IsPreviousFundingWire
                     );
            });

            // trigger date refresh
            initCalendar();

            $scope.onNextStep = function () {
                if ($location.$$path == '/StepFundingDate' && $scope.FundingFailedForm.$valid) {
                    $('form').removeClass('ng-submitted');
                    $location.path('/StepDeposit');
                    return;
                }

                if (!$scope.FundingFailedForm.$valid) {
                    $scope.ErrorMessage = 'Please correct any errors below';
                    return;
                }

                // the calendar binds to 'FundingData' - copy it to the model for JSON post
                $http.post('/AppStatus/PreFunding/FundingFailed', $scope.Model)
                    .success(function (result) {
                        if (result && result.Success) {
                            $scope.ErrorMessage = null;
                            $window.location.href = '/AppStatus/Refresh';
                        } else {
                            $scope.ErrorMessage = $sce.trustAsHtml(result.ErrorMessage);
                        }
                    });
            };

            $scope.$on('$routeChangeSuccess', function (scope, newRoute, oldRoute) {
                $timeout(function() {
                    $(document).foundation();
                });
            });

            $location.path('/StepFundingDate');
        });

    SC.prefunding.changeCheckingActInfo();
</script>
}